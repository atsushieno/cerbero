# This file contains the default configuration to compile for Android
# platforms. It contains sensitive enviroment configuration that
# shouldn't be modified unless you know what you are doing.
# PLEASE, DO NOT EDIT THIS FILE

import os
from cerbero.config import Architecture, DistroVersion
from cerbero.errors import FatalError
import cerbero.utils.messages as m

# So, paths:
#
# With NDK r16, 'Unified Headers' is the only way to build against the NDK and
# the API-level specific headers are not shipped anymore.  A migration guide is
# available from https://android.googlesource.com/platform/ndk/+/ndk-release-r16/docs/UnifiedHeaders.md
# and we follow that when setting up these paths.  One thing to note however
# is that the 'Unified Headers' ship headers that contain API-level guarded
# functions so we may need to replace or override headers.  One such example
# is iconv.h which at the time of writing, has a header in the NDK
# with no usable functions.  This simply means that we have to construct 
# cflags/cppflags/ldflags/etc to look in our directories before looking into
# the sysroot.
#
# toolchain_prefix: NDK location
# toolchain_path: location of the compiler binaries
# sysroot: location of the API-level libraries (no headers)
# isysroot: location of the headers

variants += ['nopython', 'notestspackage']

# We don't want anything from linux system to be used on android :)
allow_system_libs=False

if not toolchain_prefix:
    toolchain_prefix = os.path.join(home_dir, 'android-ndk-20')

toolchain_path = None
toolchain_version = None

v = DistroVersion.get_android_api_version(target_distro_version)

tools_prefix = None
tools_dir = None
host = None
llvm_triple = None
_arch = None
if target_arch == Architecture.ARMv7:
    tools_prefix = 'arm-linux-androideabi'
    tools_dir = tools_prefix
    arch_include = tools_prefix
    host = 'arm-linux-androideabi'
    llvm_triple = 'armv7-none-linux-androideabi' + str(v)
    _android_arch = 'arm'
    _cerbero_arch = 'armv7'
elif target_arch == Architecture.ARM64:
    tools_prefix = 'aarch64-linux-android'
    tools_dir = tools_prefix
    arch_include = tools_prefix
    host = 'aarch64-linux-android'
    llvm_triple = 'aarch64-none-linux-android'
    _android_arch = 'arm64'
    _cerbero_arch = 'arm64'
elif target_arch == Architecture.X86:
    tools_prefix = 'i686-linux-android'
    tools_dir = 'x86'
    arch_include = tools_prefix
    host = 'i686-linux-android'
    llvm_triple = "i686-none-linux-android"
    _android_arch = 'x86'
    _cerbero_arch = 'x86'
elif target_arch == Architecture.X86_64:
    tools_prefix = 'x86_64-linux-android'
    tools_dir = 'x86_64'
    host = 'x86_64-linux-android'
    llvm_triple = "x86_64-none-linux-android"
    _android_arch = 'x86_64'
    _cerbero_arch = 'x86_64'
elif target_arch == Architecture.UNIVERSAL:
    tools_prefix = ''
    host = ''
    llvm_triple = ''
    _android_arch = 'x86_64'
    _cerbero_arch = 'x86_64'
else:
  raise FatalError("Arch %s not supported" % target_arch)

llvm_toolchain_path = '.'
gcc_toolchain_root = '.'
for tc_arch in ['darwin-x86_64', 'linux-x86_64']:
    llvm_tmp = '%s/toolchains/llvm/prebuilt/%s/bin' % (toolchain_prefix, tc_arch)
    gcc_tmp = '%s/toolchains/%s-4.9/prebuilt/%s' % (toolchain_prefix, tools_dir, tc_arch)
    if os.path.exists(llvm_tmp) and os.path.exists(gcc_tmp):
        llvm_toolchain_path = llvm_tmp
        gcc_toolchain_root = gcc_tmp
        break

if target_arch != Architecture.UNIVERSAL and llvm_toolchain_path == '.':
  m.warning ("Android NDK not found")

gcc_toolchain_path = os.path.join (gcc_toolchain_root, 'bin')

isysroot = "%s/sysroot" % (toolchain_prefix)
sysroot = "%s/platforms/android-%d/arch-%s" % (toolchain_prefix, v, _android_arch)

# Default compiler flags
os.environ['CFLAGS'] = '-Wall -g -Os '
os.environ['CXXFLAGS'] = '-Wall -g -Os '
os.environ['OBJCFLAGS'] = '-Wall -g -Os '

# Android NDK path
os.environ['ANDROID_NDK'] = toolchain_prefix

# 'universal' is set by cerbero itself when building under a universal regime
# so that we can construct different paths to include/lib directories to where
# they actually are.  Without this we don't know where the headers/libs will
# actually end up
if 'universal' in variants:
    incl_dir = os.path.join(prefix, _cerbero_arch, 'include')
    lib_dir = os.path.join(prefix, _cerbero_arch, 'lib')
else:
    incl_dir = os.path.join(prefix, 'include')
    lib_dir = os.path.join(prefix, 'lib')
if target_arch != Architecture.UNIVERSAL and not os.path.exists(incl_dir):
    os.makedirs(incl_dir)
if target_arch != Architecture.UNIVERSAL and not os.path.exists(lib_dir):
    os.makedirs(lib_dir)

# Most of the compiler/linker specific flags are taken from
# from android-ndk-r16/build/core/toolchains/$NAME-$VERSION/setup.mk
ccache = use_ccache and 'ccache ' or ''
defines = '-DANDROID -DPIC -D__ANDROID_API__=%s ' % (v)
# -fno-integrated-as cause some libraries (e.g. pixman) fail to build with
# clang's assembler
# -target is being duplicated here and in CC variable to workaround cmake
# ignoring arguments in CC while other build systems may ignore CFLAGS for
# certain checks.
cflags = '-target %s --sysroot %s -gcc-toolchain %s -isysroot %s -isystem %s -isystem %s/usr/include -isystem %s/usr/include/%s -fno-integrated-as -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -fPIC -Wno-invalid-command-line-argument -Wno-unused-command-line-argument ' % (llvm_triple, sysroot, gcc_toolchain_root, isysroot, incl_dir, isysroot, isysroot, tools_prefix)

# http://b.android.com/220159 http://b.android.com/222239
if target_arch == Architecture.X86:
    if v < 24:
        cflags += ' -mstackrealign'

ldflags = '-gcc-toolchain %s -fPIC -no-canonical-prefixes -Wl,-no-undefined -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now -Wl,--gc-sections -Wl,-dynamic-linker,/system/bin/linker -Wl,--warn-shared-textrel -Wl,--exclude-libs,libatomic.a -Wl,--exclude-libs,libunwind.a' % (gcc_toolchain_root)

if target_arch == Architecture.ARMv7:
    defines += ' -D__ARM_ARCH_7A__ '
    cflags += ' -mthumb -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16'
    ldflags += ' -Wl,--fix-cortex-a8 '
elif target_arch == Architecture.X86:
    cflags += ' -march=i686 '

if not target_arch in [Architecture.ARM64, Architecture.X86_64]:
   # nocopyreloc causes broken linking on arm64
   ldflags += ' -Wl,-z,nocopyreloc '
if target_arch in [Architecture.X86_64]:
   ldflags += ' -L%s/usr/lib64 ' % sysroot
else:
   ldflags += ' -L%s/usr/lib ' % sysroot

ldvariant = 'gold'
ldflags += ' -fuse-ld=%s ' % ldvariant
ldflags += ' -L%s' % (lib_dir,)

# Toolchain environment
os.environ['CPPFLAGS'] = '-isysroot %s -isystem %s -isystem %s/usr/include -isystem %s/usr/include/%s %s' % (isysroot, incl_dir, isysroot, isysroot, tools_prefix, defines)
os.environ['CFLAGS'] += "%s %s -Wa,--noexecstack" % (cflags, defines)
os.environ['CXXFLAGS'] = os.environ['CFLAGS'] + ' -fno-rtti -fno-exceptions'
os.environ['LDFLAGS'] = '%s' % (ldflags,)

def cmd(command):
    return '%s-%s' % (tools_prefix, command)

# clang requires the full path otherwise it does stupid things and can't
# find it's own binary
os.environ['CC']= ccache + os.path.join(llvm_toolchain_path, 'clang') + ' -target %s' % (llvm_triple) + ' --sysroot %s' % (sysroot)
os.environ['CXX']= ccache + os.path.join(llvm_toolchain_path, 'clang++') + ' -target %s' % (llvm_triple) + ' --sysroot %s' % (sysroot)
os.environ['LD']= cmd('ld.%s' % ldvariant)
os.environ['CPP']= os.path.join(llvm_toolchain_path, 'clang') + ' -E'
os.environ['RANLIB']= cmd('ranlib')
os.environ['AR']= cmd('ar')
os.environ['AS']= cmd('as')
os.environ['NM']= cmd('nm')
os.environ['STRIP']= cmd('strip')
os.environ['OBJCOPY']= cmd('objcopy')

os.environ['PATH'] = '%s:%s:%s:%s' % (toolchain_prefix, llvm_toolchain_path, gcc_toolchain_path, os.environ['PATH'])
# For the libc.so dependency in i686-linux-android-as
if target_arch == Architecture.X86:
    extra_lib_path = '%s/usr/lib' % (sysroot)
elif target_arch == Architecture.X86_64:
    extra_lib_path = '%s/usr/lib64' % (sysroot)

# For GLib
os.environ['glib_cv_stack_grows'] = 'yes'
os.environ['glib_cv_uscore'] = 'no'
os.environ['ac_cv_func_posix_getpwuid_r'] = 'no'
os.environ['ac_cv_func_nonposix_getpwuid_r'] = 'no'
os.environ['ac_cv_func_posix_getgrgid_r'] = 'no'
os.environ['ac_cv_func_nonposix_getgrgid_r'] = 'no'

# For cairo
# FIXME : IF WE ADD BIG-ENDIAN PLATFORMS, FIX THIS !
os.environ['ax_cv_c_float_words_bigendian'] = 'no'

#No, really, it doesn't have uselocale
os.environ['ac_cv_func_uselocale'] = 'no'

# fixup meson detecting wrong functions as __builtin's
# https://github.com/mesonbuild/meson/issues/3672
if v < 18:
    meson_cross_properties['has_function_log2'] = 'false'
if v < 21:
    meson_cross_properties['has_function_stpcpy'] = 'false'
if v < 24:
    meson_cross_properties['has_function_fseeko'] = 'false'
    meson_cross_properties['has_function_ftello'] = 'false'
    meson_cross_properties['has_function_fsetpos'] = 'false'
    meson_cross_properties['has_function_fgetpos'] = 'false'
    meson_cross_properties['has_function_fseeko64'] = 'false'
    meson_cross_properties['has_function_ftello64'] = 'false'
    meson_cross_properties['has_function_fsetpos64'] = 'false'
    meson_cross_properties['has_function_fgetpos64'] = 'false'

